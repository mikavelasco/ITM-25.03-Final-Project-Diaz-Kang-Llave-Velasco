{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Twitter Data Scraping and Data Analysis  \n",
    "\n",
    "Welcome to Linked!'s twitter data scraping graphing tools! This program does all the work for you. All you have to do is to run these cells, input what is asked from you, and you are done! \n",
    "\n",
    "This program will give you a general idea of the market by looking into the popularity of words across 100 tweets, other hashtags associated with the one you entered, as well as the usernames with the most followers - all of that in real time! \n",
    "\n",
    "**Disclaimer!**\n",
    "Results may vary depending on the time you execute this program.\n",
    "\n",
    "### Flow\n",
    "* First, you will be asked to input a **#hashtag** of your choice. In this example, we chose **#SupportLocal**. After you enter the #hashtag, give it a few seconds as it collects data from twitter. It will **store** all the data into a **csv (comma-separated values) file** with the hashtag as the filename. If you want to take a look into the raw data, just look for it on your computer.  \n",
    "* Second, it will display the **word count** across 100 tweets. Of course, most common and irrelevant words will be filtered out for you. \n",
    "\n",
    "* Third, you will be given the option to plot the data into a **graph**. You will also be given other options to play with, such as getting the **top X words**, **top Y hashtags**, or **top Z usernames** based on followers. \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Click on the cell below and press shift + return/enter to run it. Do the same for the rest of the cells.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# MODULES TO BE USED\n",
    "import json\n",
    "import csv\n",
    "import tweepy\n",
    "import re\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "INPUTS:\n",
    "    consumer_key, consumer_secret, access_token, access_token_secret: codes \n",
    "    telling twitter that we are authorized to access this data\n",
    "    hashtag_phrase: the combination of hashtags to search for\n",
    "OUTPUTS:\n",
    "    none, simply save the tweet info to a spreadsheet\n",
    "\"\"\"\n",
    "def search_for_hashtags(consumer_key, consumer_secret, access_token, access_token_secret, hashtag_phrase):\n",
    "    \n",
    "    #create authentication for accessing Twitter\n",
    "    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n",
    "    auth.set_access_token(access_token, access_token_secret)\n",
    "\n",
    "    #initialize Tweepy API\n",
    "    api = tweepy.API(auth)\n",
    "    \n",
    "    #get the name of the spreadsheet we will write to\n",
    "    fname = '_'.join(re.findall(r\"#(\\w+)\", hashtag_phrase))\n",
    "\n",
    "    #open the spreadsheet we will write to\n",
    "    with open('%s.csv' % (fname), 'w', encoding='utf-8') as file:\n",
    "\n",
    "        w = csv.writer(file)\n",
    "\n",
    "        #write header row to spreadsheet\n",
    "        w.writerow(['timestamp', 'tweet_text', 'username', 'all_hashtags', 'followers_count'])\n",
    "\n",
    "        #for each tweet matching our hashtags, write relevant info to the spreadsheet\n",
    "        for tweet in tweepy.Cursor(api.search, q=hashtag_phrase+' -filter:retweets', \\\n",
    "                                   lang=\"en\", tweet_mode='extended').items(100):\n",
    "            w.writerow([tweet.created_at, tweet.full_text.replace('\\n',' ').encode('utf-8'), tweet.user.screen_name.encode('utf-8'), [e['text'] for e in tweet._json['entities']['hashtags']], tweet.user.followers_count])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# MAIN FUNCTION\n",
    "def main():\n",
    "    # --------------------------------------\n",
    "    # INITIALIZING\n",
    "    print(\"Hello! Welcome to Linked! This is the Market Analysis Section\")\n",
    "    \n",
    "    # keys and tokens\n",
    "    consumer_key = input('Consumer (API) Key: ')\n",
    "    consumer_secret = input('Consumer (API) Key Secret: ')\n",
    "    access_token = input('Access Token: ')\n",
    "    access_token_secret = input('Access Token Secret: ')\n",
    "    \n",
    "    # input hashtag\n",
    "    hashtag_phrase = input(\"Please enter a hashtag: \")\n",
    "    \n",
    "    if __name__ == '__main__':\n",
    "        search_for_hashtags(consumer_key, consumer_secret, access_token, access_token_secret, hashtag_phrase)\n",
    "    \n",
    "    # FUNCTIONS TO BE USED IN DATA CLEANSING\n",
    "    # --------------------------------------\n",
    "    # for cleaning username\n",
    "    def clean_up_username(name):\n",
    "        return '@'+name[2:-2]   \n",
    "    # for sorting tuple of words and count\n",
    "    def sort_tuple(x):\n",
    "        return x[1]\n",
    "    \n",
    "    # DATA CLEANSING PROPER\n",
    "    # --------------------------------------\n",
    "    # assign variable filename as name of csv file; put data into dataframe\n",
    "    filename = hashtag_phrase[1:] + '.csv'\n",
    "    df = pd.read_csv(filename)\n",
    "    \n",
    "    # apply clean_up_username function to username col in df\n",
    "    df['username'] = df['username'].apply(clean_up_username)\n",
    "    \n",
    "    # sort data by followers count\n",
    "    df.sort_values(by = 'followers_count', ascending=False, inplace=True)\n",
    "    \n",
    "    # assign variable tweet_list as list of tweet_text\n",
    "    tweet_list = [tweet for tweet in df['tweet_text']]\n",
    "    \n",
    "    # --------------------------------------\n",
    "    ## Setting up for word count\n",
    "    # initialize empty dictionary for words; assign variable remove_chars for filtering out special characters\n",
    "    words_dict = dict()\n",
    "    remove_chars = \"&$@[].,'#()-\\\"!?â€™_|/\"\n",
    "    \n",
    "    # variable top_english as list of common words to filter out\n",
    "    top_english = ['the','of','and','a','to','in','is','you','that','it','he','was','for','on','are','as','with','his','they','I','at',\n",
    "         'be','this','have','from','or','one','had','by','word','but','not','what','all','were','we','when','your','can','said',\n",
    "         'there','use','an','each','which','she','do','how','their','if','will','up','other','about','out','many','then','them',\n",
    "         'these','so','some','her','would','make','like','him','into','time','has','look','two','more','write','go','see',\n",
    "         'number','no','way','could','people','my','than','first','water','been','call','who','oil','its','now','find','long',\n",
    "         'down','day','did','get','come','made','may','part','our',\"amp;\",'say','know','think','take','see','come','could',\n",
    "         'want','look','use','find','give','tell','work','may','should','call','try','ask','need','feel','become','leave','put',\n",
    "         'mean','keep','let,''begin','seem','help','talk','turn','start','might','show','hear','play','run','move','like','live',\n",
    "         'believe','hold','bring','happen','must','write','provide','sit','stand','lose','pay','meet','include','continue','set',\n",
    "         'learn','change','lead','understand','watch','follow','stop','create','speak','read','allow','add','spend','grow','open',\n",
    "         'walk','win','offer','remember','love','consider','appear','wait','serve','die','send','expect','build','stay','fall',\n",
    "         'cut','reach','kill','remain',hashtag_phrase.upper()[1:]]\n",
    "    \n",
    "    # make all uppercase\n",
    "    top_english_words = [a.upper() for a in top_english]\n",
    "    \n",
    "    # create new string of all words in tweet_list; assign updated_tweet_string as empty string \n",
    "    tweet_string = \" \".join(tweet_list)\n",
    "    updated_tweet_string = ''\n",
    "    \n",
    "    # start removing special characters\n",
    "    for letter in tweet_string:\n",
    "        if letter not in remove_chars:\n",
    "            updated_tweet_string += letter\n",
    "    updated_tweet_string = updated_tweet_string.upper().replace('\\n',' ')\n",
    "    \n",
    "    # split string into list; put into a set\n",
    "    list_of_words = updated_tweet_string.split(' ')\n",
    "    list_of_indiv_words = set(list_of_words)\n",
    "    \n",
    "    # remove excess garbage\n",
    "    for word in list_of_indiv_words:\n",
    "        if word != '' and 'HTTPS:' not in word and '\\\\X' not in word and word not in top_english_words:\n",
    "            words_dict[word] = list_of_words.count(word)\n",
    "    \n",
    "    # create list of tuples (word, count); sort tuples using function \n",
    "    words_list = list(zip(words_dict.keys(), words_dict.values()))\n",
    "    words_list.sort(key = sort_tuple, reverse = True)\n",
    "    \n",
    "    # create new dataframe\n",
    "    df2 = pd.DataFrame(words_list)\n",
    "    df2.rename(columns = {0:'word',1:'count'}, inplace = True)\n",
    "    \n",
    "    # --------------------------------------\n",
    "    ## Setting up for hashtag count\n",
    "    # initialize empty dictionary for hashtags\n",
    "    hashtag_dict = dict()\n",
    "    \n",
    "    # clean the data so that it is a proper list\n",
    "    hashtag_list = [h for h in df['all_hashtags']]\n",
    "    hashtag_list2 = [h.split(', ') for h in hashtag_list]\n",
    "    hashtag_list3 = []\n",
    "    for h in hashtag_list2:\n",
    "        for i in h:\n",
    "            hashtag_list3.append(i)\n",
    "    hashtag_list4 = []\n",
    "    for i in hashtag_list3:\n",
    "        new_i = i.replace('[','').replace(']','').replace(\"'\",'')\n",
    "        hashtag_list4.append(new_i)\n",
    "    hashtag_list4 = [('#' + h.upper()) for h in hashtag_list4]\n",
    "    \n",
    "    # fill the dictionary with the hashtags and their count\n",
    "    for hashtag in set(hashtag_list4):\n",
    "        if hashtag != hashtag_phrase.upper():\n",
    "            hashtag_dict[hashtag] = hashtag_list4.count(hashtag)\n",
    "       \n",
    "    # create list of tuples (hashtag, count); sort tuples using function \n",
    "    hashtag_list5 = list(zip(hashtag_dict.keys(), hashtag_dict.values()))\n",
    "    hashtag_list5.sort(key = sort_tuple, reverse = True)\n",
    "    \n",
    "    # create new dataframe\n",
    "    df3 = pd.DataFrame(hashtag_list5)\n",
    "    df3.rename(columns = {0:'hashtag',1:'count'}, inplace = True)\n",
    "    \n",
    "    # DISPLAY INFO\n",
    "    # --------------------------------------\n",
    "    print('Here is the word count from 100 tweets of that hashtag:')\n",
    "    print(df2)\n",
    "    \n",
    "    # OPTION TO PLOT DATA\n",
    "    # --------------------------------------\n",
    "    while True:\n",
    "        response = input('Would you want to plot these results? (Y/N): ').upper()\n",
    "        if response == 'Y':\n",
    "            plt.figure(figsize = (15,20))\n",
    "            # first plot\n",
    "            plt.subplot(3,1,1)\n",
    "            plt.bar(x = df2.head(10)['word'], height = df2.head(10)['count'], color = 'r')\n",
    "            plt.xlabel('Word')\n",
    "            plt.ylabel('Count')\n",
    "            plt.title('Top 10 Words of Tweets From '+ hashtag_phrase)\n",
    "            \n",
    "            # second plot\n",
    "            plt.subplot(3,1,2)\n",
    "            plt.bar(x = df.head(10)['username'], height = df.head(10)['followers_count'], color = 'g')\n",
    "            plt.xlabel('User')\n",
    "            plt.ylabel('No. of Followers')\n",
    "            plt.title('Top 10 Accounts With the Most Followers From These Tweets')\n",
    "            \n",
    "            # third plot\n",
    "            plt.subplot(3,1,3)\n",
    "            plt.bar(x = df3.head(10)['hashtag'], height = df3.head(10)['count'])\n",
    "            plt.xlabel('Hashtag')\n",
    "            plt.ylabel('Count')\n",
    "            plt.title('Other Popular Hashtags Associated With '+ hashtag_phrase)\n",
    "            plt.show()\n",
    "            \n",
    "            # Option to get more words\n",
    "            # --------------------------------------\n",
    "            while True:\n",
    "                response2 = input('Would you like to get more than just the top 10 words from these tweets? (Y/N): ').upper()\n",
    "                if response2 == 'Y':\n",
    "                    X = int(input(\"How many would you like to display? Please enter a number: \").upper())\n",
    "                    print(df2[:X])\n",
    "                    \n",
    "                    #Option to get more hashtags\n",
    "                    # --------------------------------------\n",
    "                    while True:\n",
    "                        response3 = input(\"Would you like to get more than just the top 10 hashtags from these tweets? (Y/N): \").upper()\n",
    "                        if response3 == \"Y\":\n",
    "                            Y = int(input(\"How many would you like to display? Please enter a number: \").upper())\n",
    "                            print(df3[:Y])\n",
    "                            \n",
    "                            # Option to get more usernames\n",
    "                            # --------------------------------------\n",
    "                            while True:\n",
    "                                response4 = input(\"Would you like to see more than just the top 10 usernames based on followers? (Y/N): \").upper()\n",
    "                                if response4 == \"Y\":\n",
    "                                    Z = int(input(\"How many would you like to display? Please enter a number: \").upper())\n",
    "                                    print(df[[\"username\",\"followers_count\"]][:Z].reset_index().drop(columns='index'))\n",
    "                                    break\n",
    "                                elif response4 == \"N\":\n",
    "                                    break\n",
    "                                else:\n",
    "                                    print(\"Sorry, that is not a valid response. Please try again.\")\n",
    "                                    continue\n",
    "                            break\n",
    "                            # -------------------------------------- \n",
    "                            \n",
    "                        elif response3 == \"N\":\n",
    "                            break\n",
    "                        else:\n",
    "                            print(\"Sorry, that is not a valid response. Please try again.\")\n",
    "                            continue\n",
    "                    break\n",
    "                    # --------------------------------------\n",
    "                    \n",
    "                elif response2 == 'N':              \n",
    "                    break\n",
    "                else:\n",
    "                    print(\"Sorry, that is not a valid response. Please try again.\")\n",
    "                    continue\n",
    "            # --------------------------------------\n",
    "            \n",
    "            # Terminate program\n",
    "            print(\"Thank you for using Linked! Your Local Business Starter Kit!\")\n",
    "            print(\"Program has been terminated.\")\n",
    "            break\n",
    "        \n",
    "        # --------------------------------------\n",
    "        # Terminate program\n",
    "        elif response == 'N':\n",
    "            print(\"Thank you for using Linked! Your Local Business Starter Kit!\")\n",
    "            print('Program has been terminated.')\n",
    "            break\n",
    "            \n",
    "        else:\n",
    "            print('Sorry, that is not a valid response. Please try again.')\n",
    "            continue\n",
    "            \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello! Welcome to Linked! This is the Market Analysis Section\n",
      "Please enter a hashtag: #SupportLocal\n",
      "Here is the word count from 100 tweets of that hashtag:\n",
      "              word  count\n",
      "0            LOCAL     18\n",
      "1               US     13\n",
      "2            TODAY     12\n",
      "3            GREAT     10\n",
      "4        SHOPLOCAL      7\n",
      "...            ...    ...\n",
      "1221        BYOUVE      1\n",
      "1222          MASK      1\n",
      "1223  PUREMICHIGAN      1\n",
      "1224         LOANS      1\n",
      "1225       ANGELIS      1\n",
      "\n",
      "[1226 rows x 2 columns]\n",
      "Would you want to plot these results? (Y/N): Y\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1440 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Would you like to get more than just the top 10 words from these tweets? (Y/N): Y\n",
      "How many would you like to display? Please enter a number: 30\n",
      "                    word  count\n",
      "0                  LOCAL     18\n",
      "1                     US     13\n",
      "2                  TODAY     12\n",
      "3                  GREAT     10\n",
      "4              SHOPLOCAL      7\n",
      "5                SUPPORT      7\n",
      "6                   SHOP      7\n",
      "7                 ONLINE      7\n",
      "8                   FOOD      6\n",
      "9                     PM      6\n",
      "10  SUPPORTSMALLBUSINESS      6\n",
      "11                  GOOD      6\n",
      "12                  JUST      6\n",
      "13                  YOGA      5\n",
      "14              BUSINESS      5\n",
      "15                  ROAD      5\n",
      "16                COFFEE      5\n",
      "17                  SURE      5\n",
      "18             AVAILABLE      5\n",
      "19                 CHECK      5\n",
      "20       EATOUTTOHELPOUT      5\n",
      "21                  HERE      5\n",
      "22            BUSINESSES      4\n",
      "23                BGREAT      4\n",
      "24                  MOST      4\n",
      "25                  OVER      4\n",
      "26            SUPPORTING      4\n",
      "27                 THANK      4\n",
      "28           INDEPENDENT      4\n",
      "29                 ORDER      4\n",
      "Would you like to get more than just the top 10 hashtags from these tweets? (Y/N): Y\n",
      "How many would you like to display? Please enter a number: 30\n",
      "                    hashtag  count\n",
      "0                #SHOPLOCAL      7\n",
      "1     #SUPPORTSMALLBUSINESS      6\n",
      "2                    #LOCAL      5\n",
      "3          #EATOUTTOHELPOUT      5\n",
      "4                 #EATLOCAL      4\n",
      "5              #LIFTUPLOCAL      3\n",
      "6            #SMALLBUSINESS      3\n",
      "7                 #BUYLOCAL      3\n",
      "8                #SHOPSMALL      3\n",
      "9   #SUPPORTLOCALBUSINESSES      2\n",
      "10              #DRINKLOCAL      2\n",
      "11                #PAINTING      2\n",
      "12        #THURSDAYTHOUGHTS      2\n",
      "13  #SUPPORTSMALLBUSINESSES      2\n",
      "14              #STREETWEAR      2\n",
      "15               #COMMUNITY      2\n",
      "16                #DESIGNER      2\n",
      "17                  #COFFEE      2\n",
      "18              #HIGHSTREET      2\n",
      "19               #DCAFHELPS      2\n",
      "20             #HOSPITALITY      2\n",
      "21      #THURSDAYMOTIVATION      2\n",
      "22           #LOCALBUSINESS      2\n",
      "23              #NORTHLINCS      2\n",
      "24                #HANDMADE      2\n",
      "25          #SHIRTSYNDICATE      2\n",
      "26              #FIGHTCOVID      1\n",
      "27       #SAVETHEHIGHSTREET      1\n",
      "28               #FRESHBEER      1\n",
      "29            #VIRTUALEVENT      1\n",
      "Would you like to see more than just the top 10 usernames based on followers? (Y/N): Y\n",
      "How many would you like to display? Please enter a number: 30\n",
      "           username  followers_count\n",
      "0   @GoodFoodIrelan            47322\n",
      "1   @FitzgeraldFrnc            28916\n",
      "2     @HampshireFar            16093\n",
      "3   @dylanblackradi            15407\n",
      "4   @downtownlansin            14736\n",
      "5     @Attavanti_co            14633\n",
      "6              @sjf            13481\n",
      "7      @katekatebea             7177\n",
      "8     @ArgyleFineAr             7029\n",
      "9    @BusinessWandB             4415\n",
      "10     @NorthwichBI             4200\n",
      "11       @tonypacko             3924\n",
      "12     @ArcadiaLeed             3864\n",
      "13      @KentCiderC             3227\n",
      "14      @BreconWate             3002\n",
      "15        @nowtponc             2998\n",
      "16    @BrockleysRoc             2955\n",
      "17    @FourGatesGlo             2668\n",
      "18    @NWJ_Jeweller             2661\n",
      "19      @intokildar             2615\n",
      "20        @phbrewer             2614\n",
      "21        @TheHub30             2463\n",
      "22    @eastcoastbak             2349\n",
      "23    @MtPleasantCV             2023\n",
      "24  @OrchardViewFar             1948\n",
      "25    @ilovefourway             1700\n",
      "26      @CSSPcounci             1632\n",
      "27   @stupidgirl_no             1524\n",
      "28       @Thegirlwh             1451\n",
      "29        @lakaleru             1355\n",
      "Thank you for using Linked! Your Local Business Starter Kit!\n",
      "Program has been terminated.\n"
     ]
    }
   ],
   "source": [
    "main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
